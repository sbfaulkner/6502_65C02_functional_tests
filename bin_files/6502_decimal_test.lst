AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
----------------------------------------------------- 6502_decimal_test.a65 ------------------------------------------------------

358 lines read, no errors in pass 1.
                        ; Verify decimal mode behavior
                        ; Written by Bruce Clark.  This code is public domain.
                        ; see http://www.6502.org/tutorials/decimal_mode.html
                        ;
                        ; Returns:
                        ;   ERROR = 0 if the test passed
                        ;   ERROR = 1 if the test failed
                        ;   modify the code at the DONE label for desired program end
                        ;
                        ; This routine requires 17 bytes of RAM -- 1 byte each for:
                        ;   AR, CF, DA, DNVZC, ERROR, HA, HNVZC, N1, N1H, N1L, N2, N2L, NF, VF, and ZF
                        ; and 2 bytes for N2H
                        ;
                        ; Variables:
                        ;   N1 and N2 are the two numbers to be added or subtracted
                        ;   N1H, N1L, N2H, and N2L are the upper 4 bits and lower 4 bits of N1 and N2
                        ;   DA and DNVZC are the actual accumulator and flag results in decimal mode
                        ;   HA and HNVZC are the accumulator and flag results when N1 and N2 are
                        ;     added or subtracted using binary arithmetic
                        ;   AR, NF, VF, ZF, and CF are the predicted decimal mode accumulator and
                        ;     flag results, calculated using binary arithmetic
                        ;
                        ; This program takes approximately 1 minute at 1 MHz (a few seconds more on
                        ; a 65C02 than a 6502 or 65816)
                        ;
                        
                        ; Configuration:
0001 =                  cputype = 1         ; 0 = 6502, 1 = 65C02, 2 = 65C816
0000 =                  vld_bcd = 0         ; 0 = allow invalid bcd, 1 = valid bcd only
0001 =                  chk_a   = 1         ; check accumulator
0001 =                  chk_n   = 1         ; check sign (negative) flag
0001 =                  chk_v   = 1         ; check overflow flag
0001 =                  chk_z   = 1         ; check zero flag
0001 =                  chk_c   = 1         ; check carry flag
                        
                        end_of_test macro
                                        db  $db     ;execute 65C02 stop instruction
                                    endm
                        
                                bss
0000 =                          org 0
                        ; operands - register Y = carry in
0000 =                  N1      ds  1
0001 =                  N2      ds  1
                        ; binary result
0002 =                  HA      ds  1
0003 =                  HNVZC   ds  1
                                            ;04
                        ; decimal result
0004 =                  DA      ds  1
0005 =                  DNVZC   ds  1
                        ; predicted results
0006 =                  AR      ds  1
0007 =                  NF      ds  1
                                            ;08
0008 =                  VF      ds  1
0009 =                  ZF      ds  1
000a =                  CF      ds  1
000b =                  ERROR   ds  1
                                            ;0C
                        ; workspace
000c =                  N1L     ds  1
000d =                  N1H     ds  1
000e =                  N2L     ds  1
000f =                  N2H     ds  2
                        
                                code
0200 =                          org $200
0200 : a001             TEST    ldy #1    ; initialize Y (used to loop through carry flag values)
0202 : 840b                     sty ERROR ; store 1 in ERROR until the test passes
0204 : a900                     lda #0    ; initialize N1 and N2
0206 : 8500                     sta N1
0208 : 8501                     sta N2
020a : a501             LOOP1   lda N2    ; N2L = N2 & $0F
020c : 290f                     and #$0F  ; [1] see text
                                if  vld_bcd = 1
                                    cmp #$0a
                                    bcs NEXT2
                                endif
020e : 850e                     sta N2L
0210 : a501                     lda N2    ; N2H = N2 & $F0
0212 : 29f0                     and #$F0  ; [2] see text
                                if  vld_bcd = 1
                                    cmp #$a0
                                    bcs NEXT2
                                endif
0214 : 850f                     sta N2H
0216 : 090f                     ora #$0F  ; N2H+1 = (N2 & $F0) + $0F
0218 : 8510                     sta N2H+1
021a : a500             LOOP2   lda N1    ; N1L = N1 & $0F
021c : 290f                     and #$0F  ; [3] see text
                                if  vld_bcd = 1
                                    cmp #$0a
                                    bcs NEXT1
                                endif
021e : 850c                     sta N1L
0220 : a500                     lda N1    ; N1H = N1 & $F0
0222 : 29f0                     and #$F0  ; [4] see text
                                if  vld_bcd = 1
                                    cmp #$a0
                                    bcs NEXT1
                                endif
0224 : 850d                     sta N1H
0226 : 205302                   jsr ADD
0229 : 20f602                   jsr A6502
022c : 20d102                   jsr COMPARE
022f : d01a                     bne DONE
0231 : 209702                   jsr SUB
0234 : 20ff02                   jsr S6502
0237 : 20d102                   jsr COMPARE
023a : d010                     bne SUBFAIL
023c : e600             NEXT1   inc N1    ; [5] see text
023e : d0da                     bne LOOP2 ; loop through all 256 values of N1
0240 : e601             NEXT2   inc N2    ; [6] see text
0242 : d0c6                     bne LOOP1 ; loop through all 256 values of N2
0244 : 88                       dey
0245 : 10c3                     bpl LOOP1 ; loop through both values of the carry flag
0247 : a900                     lda #0    ; test passed, so store 0 in ERROR
0249 : 850b                     sta ERROR
024b :                  DONE
                                end_of_test
024b : db              >                db  $db     ;execute 65C02 stop instruction
                        
024c : a902             SUBFAIL lda #2
024e : 850b                     sta ERROR
0250 : 4c4b02                   jmp DONE
                        
                        ; Calculate the actual decimal mode accumulator and flags, the accumulator
                        ; and flag results when N1 is added to N2 using binary arithmetic, the
                        ; predicted accumulator result, the predicted carry flag, and the predicted
                        ; V flag
                        ;
0253 : f8               ADD     sed       ; decimal mode
0254 : c001                     cpy #1    ; set carry if Y = 1, clear carry if Y = 0
0256 : a500                     lda N1
0258 : 6501                     adc N2
025a : 8504                     sta DA    ; actual accumulator result in decimal mode
025c : 08                       php
025d : 68                       pla
025e : 8505                     sta DNVZC ; actual flags result in decimal mode
0260 : d8                       cld       ; binary mode
0261 : c001                     cpy #1    ; set carry if Y = 1, clear carry if Y = 0
0263 : a500                     lda N1
0265 : 6501                     adc N2
0267 : 8502                     sta HA    ; accumulator result of N1+N2 using binary arithmetic
                        
0269 : 08                       php
026a : 68                       pla
026b : 8503                     sta HNVZC ; flags result of N1+N2 using binary arithmetic
026d : c001                     cpy #1
026f : a50c                     lda N1L
0271 : 650e                     adc N2L
0273 : c90a                     cmp #$0A
0275 : a200                     ldx #0
0277 : 9006                     bcc A1
0279 : e8                       inx
027a : 6905                     adc #5    ; add 6 (carry is set)
027c : 290f                     and #$0F
027e : 38                       sec
027f : 050d             A1      ora N1H
                        ;
                        ; if N1L + N2L <  $0A, then add N2 & $F0
                        ; if N1L + N2L >= $0A, then add (N2 & $F0) + $0F + 1 (carry is set)
                        ;
0281 : 750f                     adc N2H,x
0283 : 08                       php
0284 : b004                     bcs A2
0286 : c9a0                     cmp #$A0
0288 : 9003                     bcc A3
028a : 695f             A2      adc #$5F  ; add $60 (carry is set)
028c : 38                       sec
028d : 8506             A3      sta AR    ; predicted accumulator result
028f : 08                       php
0290 : 68                       pla
0291 : 850a                     sta CF    ; predicted carry result
0293 : 68                       pla
                        ;
                        ; note that all 8 bits of the P register are stored in VF
                        ;
0294 : 8508                     sta VF    ; predicted V flags
0296 : 60                       rts
                        
                        ; Calculate the actual decimal mode accumulator and flags, and the
                        ; accumulator and flag results when N2 is subtracted from N1 using binary
                        ; arithmetic
                        ;
0297 : f8               SUB     sed       ; decimal mode
0298 : c001                     cpy #1    ; set carry if Y = 1, clear carry if Y = 0
029a : a500                     lda N1
029c : e501                     sbc N2
029e : 8504                     sta DA    ; actual accumulator result in decimal mode
02a0 : 08                       php
02a1 : 68                       pla
02a2 : 8505                     sta DNVZC ; actual flags result in decimal mode
02a4 : d8                       cld       ; binary mode
02a5 : c001                     cpy #1    ; set carry if Y = 1, clear carry if Y = 0
02a7 : a500                     lda N1
02a9 : e501                     sbc N2
02ab : 8502                     sta HA    ; accumulator result of N1-N2 using binary arithmetic
                        
02ad : 08                       php
02ae : 68                       pla
02af : 8503                     sta HNVZC ; flags result of N1-N2 using binary arithmetic
02b1 : 60                       rts
                        
                                if cputype != 1
                        ; Calculate the predicted SBC accumulator result for the 6502 and 65816
                        ;
                        SUB1        cpy #1    ; set carry if Y = 1, clear carry if Y = 0
                                    lda N1L
                                    sbc N2L
                                    ldx #0
                                    bcs S11
                                    inx
                                    sbc #5    ; subtract 6 (carry is clear)
                                    and #$0F
                                    clc
                        S11         ora N1H
                        ;
                        ; if N1L - N2L >= 0, then subtract N2 & $F0
                        ; if N1L - N2L <  0, then subtract (N2 & $F0) + $0F + 1 (carry is clear)
                        ;
                                    sbc N2H,x
                                    bcs S12
                                    sbc #$5F  ; subtract $60 (carry is clear)
                        S12         sta AR
                                    rts
                                endif
                        
                                if cputype = 1
                        ; Calculate the predicted SBC accumulator result for the 6502 and 65C02
                        ;
02b2 : c001             SUB2        cpy #1    ; set carry if Y = 1, clear carry if Y = 0
02b4 : a50c                         lda N1L
02b6 : e50e                         sbc N2L
02b8 : a200                         ldx #0
02ba : b004                         bcs S21
02bc : e8                           inx
02bd : 290f                         and #$0F
02bf : 18                           clc
02c0 : 050d             S21         ora N1H
                        ;
                        ; if N1L - N2L >= 0, then subtract N2 & $F0
                        ; if N1L - N2L <  0, then subtract (N2 & $F0) + $0F + 1 (carry is clear)
                        ;
02c2 : f50f                         sbc N2H,x
02c4 : b002                         bcs S22
02c6 : e95f                         sbc #$5F   ; subtract $60 (carry is clear)
02c8 : e000             S22         cpx #0
02ca : f002                         beq S23
02cc : e906                         sbc #6
02ce : 8506             S23         sta AR     ; predicted accumulator result
02d0 : 60                           rts
                                endif
                        
                        ; Compare accumulator actual results to predicted results
                        ;
                        ; Return:
                        ;   Z flag = 1 (BEQ branch) if same
                        ;   Z flag = 0 (BNE branch) if different
                        ;
02d1 :                  COMPARE
                                if chk_a = 1
02d1 : a504                         lda DA
02d3 : c506                         cmp AR
02d5 : d01e                         bne C1
                                endif
                                if chk_n = 1
02d7 : a505                         lda DNVZC ; [7] see text
02d9 : 4507                         eor NF
02db : 2980                         and #$80  ; mask off N flag
02dd : d016                         bne C1
                                endif
                                if chk_v = 1
02df : a505                         lda DNVZC ; [8] see text
02e1 : 4508                         eor VF
02e3 : 2940                         and #$40  ; mask off V flag
02e5 : d00e                         bne C1    ; [9] see text
                                endif
                                if chk_z = 1
02e7 : a505                         lda DNVZC
02e9 : 4509                         eor ZF    ; mask off Z flag
02eb : 2902                         and #2
02ed : d006                         bne C1    ; [10] see text
                                endif
                                if chk_c = 1
02ef : a505                         lda DNVZC
02f1 : 450a                         eor CF
02f3 : 2901                         and #1    ; mask off C flag
                                endif
02f5 : 60               C1      rts
                        
                        ; These routines store the predicted values for ADC and SBC for the 6502,
                        ; 65C02, and 65816 in AR, CF, NF, VF, and ZF
                        
                                if cputype = 0
                        
                        A6502       lda VF      ; 6502
                        ;
                        ; since all 8 bits of the P register were stored in VF, bit 7 of VF contains
                        ; the N flag for NF
                        ;
                                    sta NF
                                    lda HNVZC
                                    sta ZF
                                    rts
                        
                        S6502       jsr SUB1
                                    lda HNVZC
                                    sta NF
                                    sta VF
                                    sta ZF
                                    sta CF
                                    rts
                        
                                endif
                                if  cputype = 1
                        
02f6 : a506             A6502       lda AR      ; 65C02
02f8 : 08                           php
02f9 : 68                           pla
02fa : 8507                         sta NF
02fc : 8509                         sta ZF
02fe : 60                           rts
                        
02ff : 20b202           S6502       jsr SUB2
0302 : a506                         lda AR
0304 : 08                           php
0305 : 68                           pla
0306 : 8507                         sta NF
0308 : 8509                         sta ZF
030a : a503                         lda HNVZC
030c : 8508                         sta VF
030e : 850a                         sta CF
0310 : 60                           rts
                        
                                endif
                                if  cputype = 2
                        
                        A6502       lda AR      ; 65C816
                                    php
                                    pla
                                    sta NF
                                    sta ZF
                                    rts
                        
                        S6502       jsr SUB1
                                    lda AR
                                    php
                                    pla
                                    sta NF
                                    sta ZF
                                    lda HNVZC
                                    sta VF
                                    sta CF
                                    rts
                        
                                endif
                        
02ff =                          end TEST
                        
No errors in pass 2.
Wrote binary from address $0200 through $0310.
Total size 273 bytes.
Program start address is at $0200 (512).
